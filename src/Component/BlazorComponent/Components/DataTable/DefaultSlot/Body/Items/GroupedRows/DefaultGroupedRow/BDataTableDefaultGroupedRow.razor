@namespace BlazorComponent
@typeparam TItem
@typeparam TDataTable
@inherits ComponentAbstractBase<TDataTable>

@Render(typeof(BDataTableRowGroup), props => {
    props
        .Add("Value",IsOpen);

    if(GroupHeaderContent!=null)
    {
         props.AddContent("ColumnHeaderContent",GroupHeaderContent);
    }
    else
    {
        props.AddContent("ColumnHeaderContent",@<td class="@CssProvider.GetClass("group-header")" @attributes="ColspanAttrs">
        <AbstractComponent Metadata="@(AbstractProvider.GetMetadata(typeof(BButton),"group-toggle",data:Group.Key))">
            <AbstractComponent Metadata="@(AbstractProvider.GetMetadata(typeof(BIcon),"group-toggle-icon"))">
                @(IsOpen?GroupMinusIcon:GroupPlusIcon)
            </AbstractComponent>
        </AbstractComponent>
        @($"{Options.GroupBy[0]}: {Group.Key}")
        <AbstractComponent Metadata="@(AbstractProvider.GetMetadata(typeof(BButton),"group-remove"))">
            <AbstractComponent Metadata="@(AbstractProvider.GetMetadata(typeof(BIcon),"group-remove-icon"))">
                @GroupCloseIcon
            </AbstractComponent>
        </AbstractComponent>
    </td>);
    }

    props.AddContent("RowContentContent",@<AbstractComponent Items="@Group" Metadata="AbstractProvider.GetMetadata(typeof(BDataTableRows<,>))">
    </AbstractComponent>);
})

