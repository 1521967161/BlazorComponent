@namespace BlazorComponent
@inherits BDomComponentBase

<CascadingValue Value="this">
    <div class="@CssProvider.GetClass()" style="@CssProvider.GetStyle()" id="@Id" @ref="Ref" @onclick="HandleClickAsync">
        @if (PrependContent != default)
        {
            <div class="@CssProvider.GetClass( "prepend")">
                @PrependContent
            </div>
        }
        <div class="@CssProvider.GetClass( "control")">
            <div class="@CssProvider.GetClass( "input-slot")" style="@CssProvider.GetStyle( "input-slot")">
                <AbstractComponent Metadata="AbstractProvider.GetMetadata<IInputBody>()">
                    @ChildContent
                </AbstractComponent>

                @if (Clearable)
                {
                    <div class="@CssProvider.GetClass("append-inner")">
                        <div class="@CssProvider.GetClass("icon-clearable")">
                            <AbstractComponent Metadata="@(AbstractProvider.GetMetadata<BIcon>("clearable"))">
                                mdi-close
                            </AbstractComponent>
                        </div>
                    </div>
                }

                @if (!string.IsNullOrEmpty(AppendIcon))
                {
                    <div class="@CssProvider.GetClass("append-inner")">
                        <div class="@CssProvider.GetClass("icon")">
                            <AbstractComponent Metadata="AbstractProvider.GetMetadata<BIcon>()">
                                @AppendIcon
                            </AbstractComponent>
                        </div>
                    </div>
                }
            </div>
            @if (ShowDetails)
            {
                <div class="@CssProvider.GetClass("details")">
                    <AbstractComponent Metadata="AbstractProvider.GetMetadata<BMessage>()"></AbstractComponent>
                </div>
            }
        </div>
        @if (AppendContent != default)
        {
            <div class="@CssProvider.GetClass( "append")">
                @AppendContent
            </div>
        }
    </div>
</CascadingValue>
