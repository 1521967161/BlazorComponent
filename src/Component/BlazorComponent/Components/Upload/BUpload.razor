@namespace BlazorComponent
@using Microsoft.AspNetCore.Components.Forms
@inherits BDomComponentBase

<InputFile @ref="_inputFileReference"
           OnChange="HandleOnChange"
           multiple="@Multiple"
           accept="@Accept"
           hidden />

@if (!Card || Chips)
{
    <div class="@CssProvider.GetClass()" style="@CssProvider.GetStyle()" @onclick="HandleOnClick">
        @ActivatorContent
    </div>
}

@if (ShowUploadList)
{
    if (Chips)
    {
        <div class="@CssProvider.GetClass("chips-wrapper")" style="@CssProvider.GetStyle("chips-wrapper")">
            @foreach (var file in Files)
            {
                <BTooltip Top Disabled="string.IsNullOrEmpty(file.Error)" @attributes="GetAttributes(typeof(BTooltip))">
                    <ActivatorContent>
                        <BChip Class="upload-item"
                   Close
                   CloseIconColor="@(file.Uploaded ? "" : "red")"
                   CloseClick="@(EventCallback.Factory.Create<MouseEventArgs>(this, () => Files.Remove(file)))"
                   @attributes="context.Attrs">
                            @if (file.IsImage)
                            {
                                <BAvatar Tile @attributes="GetAttributes(typeof(BAvatar))">
                                    <AbstractComponent Metadata="AbstractProvider.GetMetadata<IImage>()" Src="@file.Url" />
                                </BAvatar>
                            }

                            <span class="@GetColorCss(file.Uploaded)">
                                @file.FileName@(ShowSize && file.BrowserFile != null ? $"({FormatSize(file.BrowserFile.Size)})" : "")
                            </span>
                        </BChip>
                    </ActivatorContent>
                    <ChildContent>
                        @file.Error
                    </ChildContent>
                </BTooltip>
            }
        </div>
    }
    else if (Card)
    {
        <div class="upload-cards">
            @foreach (var file in Files)
            {
                <BTooltip Top Disabled="string.IsNullOrEmpty(file.Error)" @attributes="GetAttributes(typeof(BTooltip))">
                    <ActivatorContent>
                        <AbstractComponent Metadata="AbstractProvider.GetMetadata<ICard>()" Outlined Style="@GetListItemStyle(file.Uploaded)" Class="upload-card upload-card--fix">
                            <div @onmouseenter="() => file.Hover = true" @onmouseleave="() => file.Hover = false" class="upload-card-item" @attributes="context.Attrs">
                                @if (file.IsImage)
                                {
                                    <AbstractComponent Metadata="AbstractProvider.GetMetadata<IImage>()" Src="@file.Url" Width="@CardSize" Height="@CardSize"></AbstractComponent>
                                }

                                <BOverlay Absolute Value="@file.Hover" Opacity="@((StringNumber)0.2)" @attributes="GetAttributes(typeof(BOverlay))">
                                    <BButton Dark Icon OnClick="() => {
                        Files.Remove(file);
                        file.Hover = false;
                }" @attributes="GetAttributes(typeof(BButton))">
                                        <BIcon @attributes="GetAttributes(typeof(BIcon))">
                                            mdi-close
                                        </BIcon>
                                    </BButton>
                                </BOverlay>
                            </div>
                        </AbstractComponent>
                    </ActivatorContent>
                    <ChildContent>
                        @file.Error
                    </ChildContent>
                </BTooltip>
            }

            <div class="upload-item @CssProvider.GetClass()" style="@CssProvider.GetStyle()" @onclick="HandleOnClick">
                @ActivatorContent
            </div>
        </div>
    }
    else
    {
        <BList @attributes="GetAttributes(typeof(BList))">
            @foreach (var file in Files)
            {
                <BTooltip Top Disabled="string.IsNullOrEmpty(file.Error)" @attributes="GetAttributes(typeof(BTooltip))">
                    <ActivatorContent>
                        <div style="@GetListItemStyle(file.Uploaded)" class="upload-item" @attributes="context.Attrs">
                            <BListItem @attributes="GetAttributes(typeof(BListItem))">
                                @if (file.IsImage)
                                {
                                    <BAvatar Tile @attributes="GetAttributes(typeof(BAvatar))">
                                        <AbstractComponent Metadata="AbstractProvider.GetMetadata<IImage>()" Src="@file.Url" />
                                    </BAvatar>
                                }
                                else
                                {
                                    <BListItemIcon @attributes="GetAttributes(typeof(BListItemIcon))">
                                        <BIcon Small Color="@(file.Uploaded ? "" : "red")" @attributes="GetAttributes(typeof(BIcon))">
                                            mdi-paperclip
                                        </BIcon>
                                    </BListItemIcon>
                                }
                                <BListItemContent @attributes="GetAttributes(typeof(BListItemContent))">
                                    <BListItemTitle Class="@GetColorCss(file.Uploaded)" @attributes="GetAttributes(typeof(BListItemTitle))">
                                        @file.FileName@(ShowSize && file.BrowserFile != null ? $"({FormatSize(file.BrowserFile.Size)})" : "")
                                    </BListItemTitle>
                                </BListItemContent>
                                <BListItemAction @attributes="GetAttributes(typeof(BListItemAction))">
                                    <BButton Icon
                                 Color="@(file.Uploaded ? "" : "red")"
                                 Small
                                 OnClick="() => Files.Remove(file)" @attributes="GetAttributes(typeof(BButton))">
                                        <BIcon @attributes="GetAttributes(typeof(BIcon))">
                                            mdi-close
                                        </BIcon>
                                    </BButton>
                                </BListItemAction>
                            </BListItem>
                        </div>
                    </ActivatorContent>
                    <ChildContent>
                        @file.Error
                    </ChildContent>
                </BTooltip>
            }
        </BList>
    }
}

@ChildContent

@if (Counter && Files.Any())
{
    <BMessages @attributes="GetAttributes(typeof(BMessages))">
        @($"{Files.Count} files"))
    </BMessages>
}

<style>
    .upload-item {
        margin-right: 4px;
        margin-bottom: 4px;
    }

    .upload-cards {
        display: flex;
    }

    .upload-card {
        display: inline-block;
    }

    .upload-card--fix {
        padding: 7px 7px 0 7px;
    }

    .upload-card-item {
        display: inline-block;
    }

    .upload-item:last-child {
        margin-right: 0px;
    }
</style>
